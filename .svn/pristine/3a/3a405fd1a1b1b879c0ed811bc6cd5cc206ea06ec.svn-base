<template>
  <div class="info-form">
    <el-form :model="ruleForm"
      :rules="rules"
      ref="ruleForm">
      <el-form-item label="信息代码" prop="infoCode">
        <el-select v-model="ruleForm.infoCode" placeholder="请选择">
          <el-option
            v-for="item in options"
            :key="item.messageCode"
            :label="item.messageCode +'\xa0\xa0\xa0' + item.messageName"
            :value="item.messageCode">
          </el-option>
        </el-select>
      </el-form-item>
      <el-row :gutter="20" class="hide-useless-requiedIcon">
        <el-col :span="3" class="min-width">
          <el-form-item label="信息的开始时间" prop="date1">
            <el-date-picker
              v-model="ruleForm.date1"
              type="date"
              placeholder="选择日期"
              :picker-options="datePickerStart"
              @change="changePickerEnd">
            </el-date-picker>
          </el-form-item>
        </el-col>
        <el-col :span="4">
          <el-form-item label=" " prop="time1">
            <el-time-picker
              v-model="ruleForm.time1"
              format="HH:mm"
              placeholder="任意时间点"
              :picker-options="timePickerStart"
              @focus="afternowHM"
              @change="changeEndTimeRange">
            </el-time-picker>
          </el-form-item>
        </el-col>
        <el-col :span="3" class="min-width">
          <el-form-item label="信息的结束时间" prop="date2">
            <el-date-picker
              v-model="ruleForm.date2"
              type="date"
              placeholder="选择日期"
              :picker-options="datePickerEnd"
              @change="changePickerStart">
            </el-date-picker>
          </el-form-item>
        </el-col>
        <el-col :span="4">
          <el-form-item label=" " prop="time2">
            <el-time-picker
              v-model="ruleForm.time2"
              format="HH:mm"
              placeholder="任意时间点"
              @focus="handleEndTime"
              :picker-options="timePickerEnd">
            </el-time-picker>
          </el-form-item>
        </el-col>
      </el-row>
      <el-form-item label="地区选择" prop="city" class="area-select">
        <el-checkbox
          :indeterminate="isIndeterminate"
          v-model="checkAll"
          @change="handleCheckAllChange">
          全选
        </el-checkbox>
        <el-checkbox-group v-model="ruleForm.city" @change="handleCheckedCitiesChange">
          <el-checkbox v-for="city in cities" :label="city" :key="city" name="city"></el-checkbox>
        </el-checkbox-group>
      </el-form-item>
      <el-form-item label="信息内容" prop="sendContent" style="margin-bottom: 40px">
        <el-input
          type="textarea"
          :autosize="{ minRows: 10, maxRows: 10}"
          resize="none"
          maxlength="65"
          placeholder="请输入内容"
          v-model="ruleForm.sendContent"
          show-word-limit>
        </el-input>
      </el-form-item>
      <el-form-item class="buttons">
        <el-button type="primary" @click="submitForm('ruleForm')">确定</el-button>
        <el-button @click="resetForm('ruleForm')">重置</el-button>
      </el-form-item>
    </el-form>
  </div>
</template>

<script>
import * as httpRequest from '@/api/infoManage/infoList'
// import parseTime from '@/utils/xhkx'

export default {
  name: 'InfoInput',
  data() {
    return {
      ruleForm: {
        infoCode: '',
        date1: '',
        time1: '',
        date2: '',
        time2: '',
        city: ['杭州', '丽水', '金华', '温州', '宁波', '舟山', '衢州', '台州', '嘉兴', '绍兴', '湖州'],
        sendContent: '',
      },
      rules: {
        infoCode: [
          { required: true, message: '请选择信息代码', trigger: 'change' }
        ],
        date1: [
          {
            type: 'date',
            required: true,
            message: '请选择日期',
            trigger: 'change'
          }
        ],
        date2: [
          {
            type: 'date',
            required: true,
            message: '请选择日期',
            trigger: 'change'
          }
        ],
        time1: [
          {
            type: 'date',
            required: true,
            message: '请选择时间',
            trigger: 'change'
          }
        ],
        time2: [
          {
            type: 'date',
            required: true,
            message: '请选择时间',
            trigger: 'change'
          }
        ],
        city: [
          {
            type: 'array',
            required: true,
            message: '请至少选择一个地区',
            trigger: 'change'
          }
        ],
        sendContent: [
          { required: true, message: '请填写信息内容', trigger: 'blur' }
        ]
      },
      options: [],
      checkAll: true,
      cities: ['杭州', '丽水', '金华', '温州', '宁波', '舟山', '衢州', '台州', '嘉兴', '绍兴', '湖州'],
      isIndeterminate: false,
      datePickerStart: {
        disabledDate(time) {
          return time.getTime() < (Date.now() - 24 * 60 * 60 * 1000)
        },
      },
      timePickerStart: '',
      datePickerEnd: {
        disabledDate(time) {
          return time.getTime() < (Date.now() - 24 * 60 * 60 * 1000)
        },
      },
      timePickerEnd: '',
    }
  },
  mounted() {
    this.init()
  },
  methods: {
    init() {
      // 信息代码列表
      httpRequest.getCodeList().then((res) => {
        if (res.code === 200) {
          this.options = res.data
        } else {
          this.$message.error(res.msg);
        }
      })
    },
    handleCheckAllChange(val) {
      this.ruleForm.city = val ? this.cities : [];
      this.isIndeterminate = false;
    },
    handleCheckedCitiesChange(value) {
      const checkedCount = value.length;
      this.checkAll = checkedCount === this.cities.length;
      this.isIndeterminate = checkedCount > 0 && checkedCount < this.cities.length;
    },
    submitForm(formName) {
      const param = {
        messageCode: this.ruleForm.infoCode,
        beginsTime: this.timeTranslator(this.ruleForm.date1, this.ruleForm.time1),
        engTime: this.timeTranslator(this.ruleForm.date2, this.ruleForm.time2),
        areas: this.ruleForm.city.toString(),
        content: this.ruleForm.sendContent,
      }
      this.$refs[formName].validate((valid) => {
        if (valid) {
          httpRequest.infoWriteIn(param).then((res) => {
            if (res.code === 200) {
              this.$message.success('录入成功')
            } else {
              this.$message.error(res.msg)
            }
          })
        }
      })
    },
    resetForm(formName) {
      this.$refs[formName].resetFields();
    },
    timeTranslator(date, time) {
      const newDate = new Date(date)
      const day = newDate.toLocaleDateString()
      const newTime = new Date(time)
      const st = `${newTime.getHours()}:${newTime.getMinutes()}`
      return new Date(`${day} ${st}`)
    },
    afternowHM() {
      let selectableRange = ''
      const myDate = new Date()
      const hour = myDate.getHours() < 10 ? `0${myDate.getHours()}` : myDate.getHours()
      const min = myDate.getMinutes() < 10 ? `0${myDate.getMinutes()}` : myDate.getMinutes()
      if (this.ruleForm.date1 > new Date()) {
        selectableRange = '00:00:00 - 23:59:59'
      } else {
        selectableRange = `${hour}:${min}:00 - 23:59:59`
      }
      this.timePickerStart = { selectableRange }
    },
    handleEndTime() {
      try {
        if (this.ruleForm.date2.getTime() - this.ruleForm.date1.getTime() > 8.64e7) {
          this.timePickerEnd = { selectableRange: '00:00:00 - 23:59:59' }
        }
        return true
      } catch (error) {
        return false
      }
    },
    changePickerStart() {
      console.log(this.ruleForm.date2)
    },
    changePickerEnd() {
      if (this.ruleForm.date1 > this.ruleForm.date2) {
        this.ruleForm.date2 = ''
        this.ruleForm.time2 = ''
      }
      this.datePickerEnd = {
        disabledDate: (time) => {
          const a = this.ruleForm.date1
          return time.getTime() < new Date(a).getTime()
        }
      }
    },
    changeEndTimeRange() {
      let selectableRange = ''
      const endTime = new Date(this.ruleForm.time1.getTime() + 1000 * 60 * 60 * 6)
      const hour = endTime.getHours() < 10 ? `0${endTime.getHours()}` : endTime.getHours()
      const min = endTime.getMinutes() < 10 ? `0${endTime.getMinutes()}` : endTime.getMinutes()
      selectableRange = `${hour}:${min}:00 - 23:59:59`
      this.timePickerEnd = { selectableRange }
      if (endTime.getHours() >= 0 && endTime.getHours() < 5) {
        this.datePickerEnd = {
          disabledDate: (time) => {
            const a = this.ruleForm.date1
            return time.getTime() < new Date(a).getTime() + 8.64e7
          }
        }
      } else {
        this.datePickerEnd = {
          disabledDate: (time) => {
            const a = this.ruleForm.date1
            return time.getTime() < new Date(a).getTime()
          }
        }
      }
      this.ruleForm.date2 = ''
      this.ruleForm.time2 = ''
    }
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style lang="scss">
  .info-form{
    .el-form-item__label{
      float: inherit;
      line-height: 30px;
      color: $formLabel;
      font-weight: 400;
    }
    .hide-useless-requiedIcon{
      .el-col:nth-child(even){
        .el-form-item__label{
          &::before{
            display: none
          }
        }
      }
    }
    .area-select{
      .el-form-item__content{
        padding: 10px 20px;
        border: 1px solid #d3d3d3;
        .el-checkbox__inner{
          width: 20px;
          height: 20px;
        }
        .el-checkbox__input.is-checked .el-checkbox__inner,
        .el-checkbox__input.is-indeterminate .el-checkbox__inner{
          background-color: #fff;
          border-color: #409EFF;
        }
        .el-checkbox__inner::after{
          border:2px solid #409EFF;
          border-left: 0;
          border-top: 0px;
          height: 13px;
          width: 5px;
          left: 6px;
          top: 0px;
        }
        .el-checkbox__input.is-indeterminate .el-checkbox__inner::before{
          background-color: #409EFF;
        }
        .el-checkbox__input.is-checked+.el-checkbox__label{
          color: #353535;
        }
        .el-checkbox__input.is-indeterminate .el-checkbox__inner::before{
          height: 17px;
          top: 1px;
        }
      }
    }
    .el-textarea__inner{
      padding: 10px;
    }
    .el-textarea{
      .el-input__count{
        color: red;
        font-size: 14px;
        bottom:10px;
        &::before{
          content:'（你已经录入了 ';
          color: $formLabel;
        }
        &::after{
          content:' 字）';
          color: $formLabel;
        }
      }
    }
    .buttons{
      margin-top: 20px;
      text-align: center;
      .el-button{
        padding: 12px 35px;
      }
    }
    .min-width{
      min-width: 140px;
    }
  }
</style>
<style lang="scss" scoped>
  .info-form{
    /deep/ .buttons{
      margin-top: 40px;
    }
  }
  /deep/ .el-input__icon:before {
    position: relative;
    top: -3px;
  }
</style>
